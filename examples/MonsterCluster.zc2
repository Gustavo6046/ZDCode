#IFDEF HasJumpZombies
class LameZombieman extends Zombieman {}
#ENDIF

class MonSpawnY extends RandomSpawner {
    #IFDEF HasJumpZombies
    set DropItem to "RunZombie", 255, 1;
    set DropItem to "LameZombimMan", 255, 1;
    #ELSE
    set DropItem to "ZombieMan", 255, 2;
    #ENDIF
    set DropItem to "DoomImp", 255, 1;
    set DropItem to "ShotgunGuy", 255, 1;
    set DropItem to "Demon", 255, 1;}

class MultiSpawner {
    set Gravity to 0;

    is NOBLOCKMAP;
    is NOSECTOR;
    is NOGRAVITY;
    is THRUACTORS;
}

class XZombieSpawner extends MultiSpawner {
    function MakeSpawn {
        x 12
            TNT1 A 9 A_SpawnItemEx('Zombieman', FRandom(-100, 100), FRandom(-100, 100), 10, 0, 0, 0, FRandom(0, 360));
    };

    label Spawn {
        TNT1 A 1;
        call MakeSpawn;
        Stop;
    };
}

class XShotGuySpawner extends MultiSpawner {
    set Gravity to 0;

    function MakeSpawn {
        x 3 TNT1 A 9 A_SpawnItemEx('ShotgunGuy', FRandom(-100, 100), FRandom(-100, 100), 10, 0, 0, 0, FRandom(0, 360));
    };

    label Spawn {
        TNT1 A 1;
        call MakeSpawn;
        Stop;
    };
}

class MonSpawnO extends RandomSpawner {
    set DropItem to "Spectre";
    set DropItem to "Fatso";
    set DropItem to "ChaingunGuy";
    set DropItem to "Arachnotron";
    set DropItem to "Revenant";
    set DropItem to "Cacodemon";
}

class MonSpawnR extends RandomSpawner {
    set DropItem to "PainElemental";
    set DropItem to "ArchVile";
    set DropItem to "HellKnight";
    set DropItem to "BaronOfHell";
}

class<ParticleSprite, Scale> SkullParticle {
    set Gravity to 0.04;
    set Scale to Scale;
    set Alpha to 0.5;
    set RenderStyle to Add;

    is THRUACTORS;

    label Spawn {
        param ParticleSprite A 12 [Bright];
        Stop;
    };
}

class<SkullSprite, Radius, SpawnedStuff, ParticleType, AlertMessage, SpawnCount, SpawnChance, DuplicateCount, DuplicateChance, ParticleCount> SkullSpawner {
    set Scale to 0.3;
    set Alpha to 0.7;
    set RenderStyle to Translucent;
    set Speed to 9;
    set Damage to 0;
    set Radius to Radius;
    set Height to 2;

    combo Projectile;

    is THRUACTORS;

    macro Duplicate {
        if (z - floorz < 40)
            TNT1 A 0 A_CustomMissile(Self, 0, 0, 180 + FRandom(-50, -50), CMF_AIMDIRECTION | CMF_SAVEPITCH, FRandom(-20, 5));

        else
            TNT1 A 0 A_CustomMissile(Self, 0, 0, 180 + FRandom(-50, 50), CMF_AIMDIRECTION | CMF_SAVEPITCH, FRandom(-20, 20));
    };

    macro MakeParticle {
        x 2 sometimes 20 TNT1 A 0 A_SpawnItemEx(ParticleType, 0, 0, 0, FRandom(-2, 2), FRandom(-2, 2), FRandom(-2, 2));
    };

    label Spawn {
        param SkullSprite A 2 [Bright];
        x 3 inject MakeParticle;
        Loop;
    };

    label Death {
        x SpawnCount sometimes SpawnChance {
            TNT1 A 0 A_Log(AlertMessage);
            TNT1 A 0 A_SpawnItemEx(SpawnedStuff, 0, 0, floorz - z);
        };

        x DuplicateCount sometimes DuplicateChance
            inject Duplicate;

        x ParticleCount inject MakeParticle;
        TNT1 A 1;
        Stop;
    };
}

derive SkullParticleR as SkullParticle::("SKPR", 1.0);
derive SkullParticleO as SkullParticle::("SKPO", 0.7);
derive SkullParticleY as SkullParticle::("SKPY", 0.5);

derive SkullSpawnerR as SkullSpawner::("SKLR", 30, "MonSpawnR", "SkullParticleR", "RED ALERT: New high-level threat detected!", 1, 96, 5, 8, 20);
derive SkullSpawnerO as SkullSpawner::("SKLO", 45, "MonSpawnO", "SkullParticleO", "ORANGE ALERT: New medium-level threat detected!", 2, 83, 6, 10, 20);
derive SkullSpawnerY as SkullSpawner::("SKLY", 60, "MonSpawnY", "SkullParticleY", "YELLOW ALERT: New low-level threat detected!", 4, 75, 7, 12, 16);
