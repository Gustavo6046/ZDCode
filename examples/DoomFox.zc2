class MSPart {
    isn't   SOLID;
    is      FORCEXYBILLBOARD;

    is  CLIENTSIDEONLY;

    set Gravity to 0;
}

class<Size> MSP_Limb extends MSPart {
    set Scale to Size;

    label Spawn {
        TNT1 A 0;
        inject Display;
        Stop;
    };

    abstract macro Display;
}

class<LimbType> MSGore_FoxLimb {
    set Gravity                 to 0.825;
    set WallBounceFactor        to 0.8;
    set PushFactor              to 0.6;
    set Species                 to "MSGore";
    set Radius                  to 2;
    set Height                  to 3;
    set BounceType              to "Doom";
    set BounceCount             to 10;
    set BounceFactor            to 0.55;

    set BounceSound             to "zdpack/multisprite/animal/fox/gib/bounce";

    is  BOUNCEONWALLS;
    is  BOUNCEONCEILINGS;
    is  BOUNCEONACTORS;
    is  ALLOWBOUNCEONACTORS;

    is  PUSHABLE;
    is  CANNOTPUSH;
    is  SOLID;
    is  BOUNCEONACTORS;
    is  DROPOFF;
    is  NOBLOCKMONST;
    is  CANPASS;
    is  SLIDESONWALLS;
    is  NOTELESTOMP;
    is  CANBLAST;
    is  THRUSPECIES;
    is  PAINLESS;
    is  CANBOUNCEWATER;
    is  CORPSE;

    var user_limbangle = Random(0, 255);

    macro Display {
        TNT1 A 0 A_SpawnItemEx(LimbType, 0, 0, 0, 0, 0, 0, user_limbangle);
        TNT1 A 0 A_SetUserVar("user_limbangle", user_limbangle + (velx*velx + vely*vely + velz*velz) * 0.3);
        TNT1 A 1;
    };

    label Spawn {
        TNT1 A 0;
        TNT1 A 0 x2 A_PlaySound("zdpack/multisprite/animal/fox/gibbed");
        goto Thrust;
    };

    label Thrust {
        TNT1 A 0 {
            A_CheckFloor("Death");
            ThrustThing(random(0, 255), random(3, 17) * 4, 1, 0);
            ThrustThingZ(0, random(40, 120), 0, 1);
        };
        goto Fly;
    };

    label Fly {
        TNT1 A 0 A_ScaleVelocity(0.97);

        if (velx*velx + vely*vely + velz*velz > 3) {
            sometimes 35 TNT1 A 0 A_SpawnItemEx("Blood", -4, Random(0, 4) - 2, 2, Random(-2, 2), Random(-2, 2), Random(1, -4));
        };

        inject Display;
        goto Fly;
    };

    label Landed {
        goto Death;
    };

    label Death {
        inject Display;
        TNT1 A 0 A_CheckFloor(2);
        TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/gib/bounce");
        goto Fly;
        sometimes 10 goto RealDeath;
        loop;
    };

    label RealDeath {
        TNT1 A 0;
        stop;
    };
}

derive MSP_Head1 as MSP_Limb::(0.35) { macro Display { FX_H A 1; }; };
derive MSP_Head2 as MSP_Limb::(0.35) { macro Display { FX_H B 1; }; };

derive MSP_Tail1 as MSP_Limb::(0.6) { macro Display { FX_T A 1; }; };
derive MSP_Tail2 as MSP_Limb::(0.6) { macro Display { FX_T B 1; }; };
derive MSP_Tail3 as MSP_Limb::(0.6) { macro Display { FX_T C 1; }; };
derive MSP_Tail4 as MSP_Limb::(0.6) { macro Display { FX_T D 1; }; };
derive MSP_Tail5 as MSP_Limb::(0.6) { macro Display { FX_T E 1; }; };

derive MSP_Torso as MSP_Limb::(0.6) { macro Display { FX_R A 1; }; };

derive MSP_Leg1 as MSP_Limb::(0.5) { macro Display{ FX_L A 1; }; };
derive MSP_Leg2 as MSP_Limb::(0.5) { macro Display{ FX_L B 1; }; };
derive MSP_Leg3 as MSP_Limb::(0.5) { macro Display{ FX_L C 1; }; };
derive MSP_Leg4 as MSP_Limb::(0.5) { macro Display{ FX_L D 1; }; };

derive MSG_Leg      as MSGore_FoxLimb::("MSP_Leg1");
derive MSG_Head     as MSGore_FoxLimb::("MSP_Head2");
derive MSG_Torso    as MSGore_FoxLimb::("MSP_Torso");


class MSA_Fox {
    set     Health          to 40;
    set     Mass            to 8;

    combo   Monster;

    is      FRIENDLY;
    is      NOBLOCKMONST;
    is      DROPOFF;
    is      SLIDESONWALLS;

    macro SpawnLimb(height, forward, right, cls) {
        TNT1 A 0 A_SpawnItemEx(cls, forward, right, height + 5);
    };

    macro DrawLegAt_A(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg1");
    };

    macro DrawLegAt_B(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg2");
    };

    macro DrawLegAt_C(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg3");
    };

    macro DrawLegAt_D(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg4");
    };

    macro DrawHeadNormal {
       inject SpawnLimb(9, 24, 0, "MSP_Head1");
    };

    macro DrawHeadAttack {
       inject SpawnLimb(9, 24, 0, "MSP_Head2");
    };

    macro DrawTorso {
        inject SpawnLimb(10, 2, 0, "MSP_Torso");
    };

    macro DrawTail(which) {
        inject SpawnLimb(11, -8, 0, which);
    };

    // Combine individual parts
    macro DrawLegsNormal {
        inject DrawLegAt_A( 6, -3.5);
        inject DrawLegAt_A( 6,  3.5);
        inject DrawLegAt_A(-6, -3.5);
        inject DrawLegAt_A(-6,  3.5);
    };

    macro DrawLegs1 {
        inject DrawLegAt_A( 6, -3.5);
        inject DrawLegAt_C( 6,  3.5);
        inject DrawLegAt_A(-6, -3.5);
        inject DrawLegAt_C(-6,  3.5);
    };

    macro DrawLegs2 {
        inject DrawLegAt_B( 6, -3.5);
        inject DrawLegAt_D( 6,  3.5);
        inject DrawLegAt_B(-6, -3.5);
        inject DrawLegAt_D(-6,  3.5);
    };

    macro DrawLegs3 {
        inject DrawLegAt_C( 6, -3.5);
        inject DrawLegAt_A( 6,  3.5);
        inject DrawLegAt_C(-6, -3.5);
        inject DrawLegAt_A(-6,  3.5);
    };

    macro DrawLegs4 {
        inject DrawLegAt_D( 6, -3.5);
        inject DrawLegAt_B( 6,  3.5);
        inject DrawLegAt_D(-6, -3.5);
        inject DrawLegAt_B(-6,  3.5);
    };

    // Animations
    macro DrawTail1 {
        inject DrawTail("MSP_Tail1");
    };

    macro DrawTail2 {
        inject DrawTail("MSP_Tail2");
    };

    macro DrawTail3 {
        inject DrawTail("MSP_Tail3");
    };

    macro DrawTail4 {
        inject DrawTail("MSP_Tail4");
    };

    macro DrawTail5 {
        inject DrawTail("MSP_Tail5");
    };

    // Animation states
    macro DrawWait1 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadNormal;
    };

    macro DrawWait2 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail2;
        inject DrawHeadNormal;
    };

    macro DrawWait3 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail3;
        inject DrawHeadNormal;
    };

    macro DrawWait4 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail4;
        inject DrawHeadNormal;
    };

    macro DrawWait5 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail5;
        inject DrawHeadNormal;
    };

    macro DrawAttack1 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadAttack;
    };

    macro DrawAttack2 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail3;
        inject DrawHeadAttack;
    };

    macro DrawAttack3 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadAttack;
    };

    macro DrawAttack4 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail5;
        inject DrawHeadAttack;
    };

    macro DrawWalk1 {
        inject DrawLegs1;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadNormal;
    };

    macro DrawWalk2 {
        inject DrawLegs2;
        inject DrawTorso;
        inject DrawTail3;
        inject DrawHeadNormal;
    };

    macro DrawWalk3 {
        inject DrawLegs3;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadNormal;
    };

    macro DrawWalk4 {
        inject DrawLegs4;
        inject DrawTorso;
        inject DrawTail5;
        inject DrawHeadNormal;
    };

    // States
    label Spawn {
        // Tail swinging to a side.
        x8 { TNT1 A 1; inject DrawWait1; };
        x6 { TNT1 A 1; inject DrawWait2; };
        TNT1 A 0 A_Look;
        x6 { TNT1 A 1; inject DrawWait3; };
        x6 { TNT1 A 1; inject DrawWait2; };
        TNT1 A 0 A_Look;

        // Tail swinging to the other side.
        x8 { TNT1 A 1; inject DrawWait1; };
        x6 { TNT1 A 1; inject DrawWait4; };
        TNT1 A 0 A_Look;
        x6 { TNT1 A 1; inject DrawWait5; };
        x6 { TNT1 A 1; inject DrawWait4; };
        TNT1 A 0 A_Look;

        sometimes 75 {
            TNT1 A 0 A_ClearTarget;
            goto Idle;
        };

        loop;
    };

    label Idle {
        x6 { TNT1 A 1; inject DrawWalk1; TNT1 A 0 { A_Look; A_Wander; A_Recoil(-0.4); }; };
        sometimes 8 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/idle");
        x4 { TNT1 A 1; inject DrawWalk2; TNT1 A 0 { A_Look; A_Wander; A_Recoil(-0.4); }; };
        sometimes 8 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/idle");
        x6 { TNT1 A 1; inject DrawWalk3; TNT1 A 0 { A_Look; A_Wander; A_Recoil(-0.4); }; };
        sometimes 8 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/idle");
        x4 { TNT1 A 1; inject DrawWalk4; TNT1 A 0 { A_Look; A_Wander; A_Recoil(-0.4); }; };
        sometimes 8 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/idle");

        loop;
    };

    label Pain {
        TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/hurt");
        x3 { TNT1 A 1; inject DrawAttack3; };
        x2 { TNT1 A 1; inject DrawAttack2; };
             TNT1 A 1; inject DrawAttack1;

        TNT1 A 0 A_JumpIfTargetInLOS("Idle");
        goto See;
    };

    label See {
        x4 { TNT1 A 1; inject DrawWalk1; TNT1 A 0               { A_Chase; A_Wander; A_Recoil(-0.8); }; };
        sometimes 7 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/see");
        x2 { TNT1 A 1; inject DrawWalk2; TNT1 A 0               { A_Chase; A_Wander; A_Recoil(-0.8); }; };
        sometimes 6 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/see");
        x3 { TNT1 A 1; inject DrawWalk3; TNT1 A 0  { A_Chase; A_Wander; A_Recoil(-0.8); }; };
        sometimes 7 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/see");
        x2 { TNT1 A 1; inject DrawWalk4; TNT1 A 0               { A_Chase; A_Wander; A_Recoil(-0.8); }; };
        sometimes 6 TNT1 A 0 A_PlaySound("zdpack/multisprite/animal/fox/see");

        loop;
    };

    macro MeleeAttack {
        TNT1 A 0 A_FaceTarget;
        TNT1 A 0 A_CustomMeleeAttack(random(1, 6), "zdpack/multisprite/animal/fox/bite");
        sometimes 30 goto Idle;
    };

    label Melee {
        x5 { TNT1 A 1; inject DrawAttack1; TNT1 A 0 { A_FaceTarget; A_Recoil(-0.3); }; };
        goto MeleeLoop;
    };

    label MeleeLoop {
        x2 { TNT1 A 1; inject DrawAttack1; TNT1 A 0 { A_FaceTarget; A_Recoil(-0.3); }; inject MeleeAttack; };
        TNT1 A 0 A_JumpIfTargetOutsideMeleeRange("See");
        x2 { TNT1 A 1; inject DrawAttack2; TNT1 A 0 { A_FaceTarget; A_Recoil(-0.3); }; };
        TNT1 A 0 A_JumpIfTargetOutsideMeleeRange("See");
        x2 { TNT1 A 1; inject DrawAttack4; TNT1 A 0 { A_FaceTarget; A_Recoil(-0.3); }; inject MeleeAttack; };
        TNT1 A 0 A_JumpIfTargetOutsideMeleeRange("See");
        x2 { TNT1 A 1; inject DrawAttack3; TNT1 A 0 { A_FaceTarget; A_Recoil(-0.3); }; };
        TNT1 A 0 A_JumpIfTargetOutsideMeleeRange("See");
        TNT1 A 0 A_ClearTarget;
        goto Idle;
    };

    label Death {
        TNT1 A 0 {
            x4 A_SpawnItemEx("MSG_Leg", 0, 0, height * 1.2);
            A_SpawnItemEx("MSG_Head", 0, 0, height * 1.2);
            A_SpawnItemEx("MSG_Torso", 0, 0, height * 1.2);
        };
        stop;
    };
}

// now, adding to the normal game

class<PickupSprite, PickupType> FoxyPickup {
    is LOOKALLAROUND;
    is AMBUSH;
    is QUICKTORETALIATE;

    label Spawn {
        param PickupSprite A 0;
        goto Look;
    };

    label Look {
        keeps 2 A_LookEx(LOF_NOSOUNDCHECK);
        loop;
    };

    label See {
        keeps 0 A_JumpIfCloser(270, "SpawnFox");
        goto Look;
    };

    label SpawnFox {
        keeps 0 ThrustThingZ(0, random(3, 8), 0, 1);

        keeps 30 [Bright] ThrustThing(random(0, 255), random(2, 5), 0, 0);
        x 3 sometimes 70 {
            keeps 30 [Bright] ThrustThing(random(0, 255), random(2, 5), 0, 0);
        };

        TNT1 A 0 A_SpawnItemEx("MSA_Fox");
        TNT1 A 0 A_SpawnItemEx(class extends PickupType);

        stop;
    };
}

class<PickupSprite, PickupType, NormalChance, FoxChance> FoxyPickupSpawner replaces PickupType {
    label Spawn {
        TNT1 A 0;
        sometimes (100 * FoxChance / (NormalChance + FoxChance)) {
            TNT1 A 0 A_SpawnItemEx(FoxyPickup::(PickupSprite, PickupType), 0, 0, 4);
            stop;
        };
        TNT1 A 0 A_SpawnItemEx(class extends PickupType);
        stop;
    };
}

derive FoxyHealthBonusSpawner   as FoxyPickupSpawner::("BON1", "HealthBonus",   8,  1);
derive FoxyArmorBonusSpawner    as FoxyPickupSpawner::("BON2", "ArmorBonus",    32, 7);
derive FoxyClipSpawner          as FoxyPickupSpawner::("CLIP", "Clip",          9,  2);
