/*
 *              --- EINSTEINIAN INTERNAL INVENTORY NONSENSE PSEUDOSCIENCE BLABLABLA ---
 */

/*      Demand
 
    If an item is requested, the Demand counter increments. Every 35 * 30 tics (half a minute),
    the Demand counter halves.
    The Demand is an important factor when calculating the Cost.
*/
class Demand extends Inventory {}

/*      HalfADemand

    Used when halfing the Demand.
*/
class HalfADemand extends Inventory {}

/*      CoinValue
 
    Each seller will determine the value of the coins they have, in a way. From exchanging with
    other coin holding things (CHTh), they will increment the CoinValue counter if there are too
    little coins in both sides of the exchange, and will decrement the counter if there are too
    many coins. This roughly simulates inflation and deflation in a local level, and it plays a major
    rule in calculating the Cost.
*/
class CoinValue extends Inventory {}

/*      Cost
 
    Whenever an unit of an item is requested, the Cost is set to (D * v / S), where
    D is the Demand (which applies to all products), v is the CoinValue, and S is the
    quantity of the specific product available in the inventory.


    When the cost is calculated, we use A_JumpIfInTargetInventory to make sure our buyer has
    enough money, and exchange the item (and coins) using the A_Take* and A_Give* actions.
*/
class Cost extends Inventory {}


//--- COIN PICKUPS ---

/*
 * Yay! I'm rich!
 */
class Coin extends Inventory {
    label Spawn {
        COIN A -1;
        Stop;
    };
}

/*
 * "They say selling isn't the only way to get coins in this level."
 */
class SmallCoinBag extends Coin {
    set Inventory.Amount to 25;

    label Spawn {
        SCNB A -1;
        Stop;
    };
}

/*
 *                  --- MAGIC ---
 */

// Luring other Sellers' attentions to, uh, buy?
class ExchangeWithMe {
    set Damage to 0;
    set DamageType to Lure;
    set Speed to 35;
    

    combo Projectile;
    is BLOODLESSIMPACT;

    label Spawn {
        TNT1 A 0;
        TNT1 A 3;
        Stop;
    };
}

/*
 *                 --- FEATURING ---
 */
class Seller {
    combo Monster;
}